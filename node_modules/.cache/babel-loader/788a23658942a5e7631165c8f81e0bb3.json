{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _util = require('./util');\n\nvar scrollId = 'scroll-id';\n\nfunction EventDispatcher(target) {\n  this._listeners = {};\n  this._eventTarget = target || {};\n  this.recoverLists = [];\n  this._listFun = {};\n}\n\nEventDispatcher.prototype = {\n  addEventListener: function addEventListener(type, callback, target, options) {\n    var types = type.split('.');\n    var _type = types[0];\n    var namespaces = types[1];\n\n    if (target && !target.getAttribute(scrollId)) {\n      target.setAttribute(scrollId, (Date.now() + Math.random()).toString(32).replace('.', ''));\n    }\n\n    var listName = '' + _type + (target ? '_' + target.getAttribute(scrollId) : '');\n    var list = this._listeners[listName];\n    var index = 0;\n    var listener = void 0;\n    var i = void 0;\n\n    if (!list) {\n      list = [];\n      this._listeners[listName] = list;\n    }\n\n    i = list.length;\n\n    while (--i > -1) {\n      listener = list[i];\n\n      if (listener.n === namespaces && listener.c === callback) {\n        list.splice(i, 1);\n      } else if (index === 0) {\n        index = i + 1;\n      }\n    }\n\n    var $target = target || this._eventTarget;\n    list.splice(index, 0, {\n      c: callback,\n      n: namespaces,\n      t: _type\n    });\n\n    if (!this._listFun[listName]) {\n      this._listFun[listName] = this._listFun[listName] || this.dispatchEvent.bind(this, {\n        type: _type,\n        target: target\n      });\n\n      if ($target.addEventListener) {\n        $target.addEventListener(_type, this._listFun[listName], options);\n      } else if ($target.attachEvent) {\n        $target.attachEvent('on' + _type, this._listFun[listName]);\n      }\n    }\n  },\n  removeEventListener: function removeEventListener(type, callback, target, force) {\n    var types = type.split('.');\n    var _type = types[0];\n    var namespaces = types[1];\n    var listName = '' + _type + (target ? '_' + target.getAttribute(scrollId) : '');\n    var list = this._listeners[listName];\n    var i = void 0;\n    var _force = force;\n\n    if (!namespaces) {\n      _force = true;\n    }\n\n    if (list) {\n      i = list.length;\n      var $target = target || this._eventTarget;\n\n      while (--i > -1) {\n        if (list[i].c === callback && (_force || list[i].n === namespaces)) {\n          list.splice(i, 1);\n\n          if (!list.length) {\n            var func = this._listFun[listName];\n            delete this._listeners[listName];\n            delete this._listFun[listName];\n\n            if ($target.removeEventListener) {\n              $target.removeEventListener(_type, func);\n            } else if ($target.detachEvent) {\n              $target.detachEvent('on' + _type, func);\n            }\n          }\n\n          if (!_force) {\n            return;\n          }\n        }\n      }\n    }\n  },\n  dispatchEvent: function dispatchEvent(_ref, e) {\n    var type = _ref.type,\n        target = _ref.target;\n    var listName = '' + type + (target ? '_' + target.getAttribute(scrollId) : '');\n    var list = this._listeners[listName];\n    var i = void 0;\n    var t = void 0;\n    var listener = void 0;\n\n    if (list) {\n      i = list.length;\n      t = this._eventTarget;\n\n      while (--i > -1) {\n        listener = list[i];\n\n        if (listener) {\n          var _e = e || {\n            type: type,\n            target: t\n          };\n\n          listener.c.call(t, _e);\n        }\n      }\n    }\n  },\n  removeAllType: function removeAllType(type, target) {\n    var _this = this;\n\n    var types = type.split('.');\n    var _type = types[0];\n    var namespaces = types[1];\n    var listName = '' + _type + (target ? '_' + target.getAttribute(scrollId) : '');\n    var list = this._listeners[listName];\n    this.recoverLists = this.recoverLists.concat((0, _util.dataToArray)(list).filter(function (item) {\n      return item.n && item.n.match(namespaces);\n    }));\n    this.recoverLists.forEach(function (item) {\n      _this.removeEventListener(item.t + '.' + item.n, item.c, target);\n    });\n  },\n  reAllType: function reAllType(type, target) {\n    var _this2 = this;\n\n    var types = type.split('.');\n    var _type = types[0];\n    var namespaces = types[1];\n    this.recoverLists = this.recoverLists.map(function (item) {\n      if (item.t === _type && item.n.match(namespaces)) {\n        _this2.addEventListener(item.t + '.' + item.n, item.c, target);\n\n        return null;\n      }\n\n      return item;\n    }).filter(function (item) {\n      return item;\n    });\n  }\n};\nexports['default'] = new EventDispatcher(typeof window !== 'undefined' && typeof document !== 'undefined' && window);\n;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}